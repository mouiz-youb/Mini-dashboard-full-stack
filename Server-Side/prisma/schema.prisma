// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id            Int       @id @default(autoincrement())
//   email         String    @unique
//   name          String?
//   // password String 
//   // role String @default("User")
//   // createdAt DateTime @default(now())
//   // updatedAt DateTime @updatedAt
//   // posts Post[]
//   emailVerified Boolean
//   image         String?
//   createdAt     DateTime
//   updatedAt     DateTime
//   sessions      Session[]
//   accounts      Account[]

//   @@map("user")
// }

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[]
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Post {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  title    String
  content  String?
  comments Comment[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  content String
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  price       Float
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                Int
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
